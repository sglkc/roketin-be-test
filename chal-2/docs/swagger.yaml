consumes:
- application/json
definitions:
  dto.BaseResponse:
    properties:
      message:
        type: string
      success:
        type: boolean
    type: object
  dto.DataResponse-models_Movie:
    properties:
      data:
        $ref: '#/definitions/models.Movie'
      message:
        type: string
      success:
        type: boolean
    type: object
  dto.ErrorResponse:
    properties:
      message:
        type: string
      success:
        type: boolean
    type: object
  dto.PaginatedResponse-models_Movie:
    properties:
      count:
        type: integer
      data:
        items:
          $ref: '#/definitions/models.Movie'
        type: array
      limit:
        type: integer
      message:
        type: string
      page:
        type: integer
      success:
        type: boolean
    type: object
  models.Movie:
    properties:
      artists:
        items:
          type: string
        minItems: 1
        type: array
      description:
        type: string
      duration:
        minimum: 1
        type: integer
      genres:
        items:
          type: string
        minItems: 1
        type: array
      id:
        minimum: 1
        type: integer
      title:
        type: string
    required:
    - artists
    - description
    - duration
    - genres
    - title
    type: object
info:
  contact:
    name: sglkc
    url: https://github.com/sglkc/roketin-be-test
  description: This is a sample movies API using Gin framework.
  title: Movies API
  version: "1.0"
paths:
  /movies:
    get:
      description: Get a list of all movies with pagination
      parameters:
      - default: 1
        description: Page number for pagination
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of movies per page
        in: query
        name: limit
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.PaginatedResponse-models_Movie'
            type: array
      summary: Get all movies
      tags:
      - Movies
    post:
      description: Create a new movie
      parameters:
      - description: Movie object to create
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/models.Movie'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.DataResponse-models_Movie'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Create a new movie
      tags:
      - Movies
  /movies/{id}:
    delete:
      description: Delete a movie by ID
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Delete a movie
      tags:
      - Movies
    get:
      description: Get movie by ID
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.DataResponse-models_Movie'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get movie
      tags:
      - Movies
    put:
      description: Update a movie by ID
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated movie object
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/models.Movie'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.DataResponse-models_Movie'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Update a movie
      tags:
      - Movies
  /movies/search:
    get:
      description: Search for movies by title, description, artist, or genre
      parameters:
      - description: Movie title to search for
        in: query
        name: title
        type: string
      - description: Movie description to search for
        in: query
        name: description
        type: string
      - description: Movie artist to search for
        in: query
        name: artist
        type: string
      - description: Movie genre to search for
        in: query
        name: genre
        type: string
      - default: 1
        description: Page number for pagination
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of movies per page
        in: query
        name: limit
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.PaginatedResponse-models_Movie'
            type: array
      summary: Search movies
      tags:
      - Movies
produces:
- application/json
swagger: "2.0"
